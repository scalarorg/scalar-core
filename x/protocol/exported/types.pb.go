// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/protocol/exported/v1beta1/types.proto

package exported

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_scalarorg_scalar_core_x_multisig_exported "github.com/scalarorg/scalar-core/x/multisig/exported"
	github_com_scalarorg_scalar_core_x_nexus_exported "github.com/scalarorg/scalar-core/x/nexus/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityModel int32

const (
	LIQUIDITY_MODEL_UNSPECIFIED LiquidityModel = 0
	LIQUIDITY_MODEL_POOL        LiquidityModel = 1
	LIQUIDITY_MODEL_UPC         LiquidityModel = 2
)

var LiquidityModel_name = map[int32]string{
	0: "LIQUIDITY_MODEL_UNSPECIFIED",
	1: "LIQUIDITY_MODEL_POOL",
	2: "LIQUIDITY_MODEL_UPC",
}

var LiquidityModel_value = map[string]int32{
	"LIQUIDITY_MODEL_UNSPECIFIED": 0,
	"LIQUIDITY_MODEL_POOL":        1,
	"LIQUIDITY_MODEL_UPC":         2,
}

func (x LiquidityModel) String() string {
	return proto.EnumName(LiquidityModel_name, int32(x))
}

func (LiquidityModel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_417dfcc53daddf21, []int{0}
}

type MinorAddress struct {
	ChainName github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"chain_name,omitempty"`
	Address   string                                                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MinorAddress) Reset()         { *m = MinorAddress{} }
func (m *MinorAddress) String() string { return proto.CompactTextString(m) }
func (*MinorAddress) ProtoMessage()    {}
func (*MinorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_417dfcc53daddf21, []int{0}
}
func (m *MinorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinorAddress.Merge(m, src)
}
func (m *MinorAddress) XXX_Size() int {
	return m.Size()
}
func (m *MinorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MinorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MinorAddress proto.InternalMessageInfo

type ProtocolInfo struct {
	KeyID            github_com_scalarorg_scalar_core_x_multisig_exported.KeyID  `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3,casttype=github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	CustodiansPubkey []byte                                                      `protobuf:"bytes,2,opt,name=custodians_pubkey,json=custodiansPubkey,proto3" json:"custodians_pubkey,omitempty"`
	LiquidityModel   LiquidityModel                                              `protobuf:"varint,3,opt,name=liquidity_model,json=liquidityModel,proto3,enum=scalar.protocol.exported.v1beta1.LiquidityModel" json:"liquidity_model,omitempty"`
	Symbol           string                                                      `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OriginChain      github_com_scalarorg_scalar_core_x_nexus_exported.ChainName `protobuf:"bytes,5,opt,name=origin_chain,json=originChain,proto3,casttype=github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" json:"origin_chain,omitempty"`
	MinorAddresses   []*MinorAddress                                             `protobuf:"bytes,6,rep,name=minor_addresses,json=minorAddresses,proto3" json:"minor_addresses,omitempty"`
}

func (m *ProtocolInfo) Reset()         { *m = ProtocolInfo{} }
func (m *ProtocolInfo) String() string { return proto.CompactTextString(m) }
func (*ProtocolInfo) ProtoMessage()    {}
func (*ProtocolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_417dfcc53daddf21, []int{1}
}
func (m *ProtocolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolInfo.Merge(m, src)
}
func (m *ProtocolInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("scalar.protocol.exported.v1beta1.LiquidityModel", LiquidityModel_name, LiquidityModel_value)
	proto.RegisterType((*MinorAddress)(nil), "scalar.protocol.exported.v1beta1.MinorAddress")
	proto.RegisterType((*ProtocolInfo)(nil), "scalar.protocol.exported.v1beta1.ProtocolInfo")
}

func init() {
	proto.RegisterFile("scalar/protocol/exported/v1beta1/types.proto", fileDescriptor_417dfcc53daddf21)
}

var fileDescriptor_417dfcc53daddf21 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0xdb, 0x26, 0x28, 0x9b, 0x28, 0x0d, 0x4b, 0x04, 0x56, 0x91, 0xec, 0xa8, 0xa7, 0x08,
	0x81, 0x4d, 0x0b, 0x27, 0x38, 0x35, 0x1f, 0x20, 0x8b, 0x7c, 0x61, 0xe8, 0x01, 0x0e, 0x58, 0x8e,
	0xbd, 0xb8, 0x4b, 0x6c, 0x6f, 0xea, 0xb5, 0x51, 0xfc, 0x0f, 0x38, 0x72, 0x41, 0xe2, 0xce, 0x9f,
	0xe9, 0xb1, 0x47, 0x4e, 0x16, 0x38, 0xff, 0xa2, 0x27, 0xe4, 0xb5, 0x9d, 0x36, 0xe9, 0xa1, 0x95,
	0xb8, 0xcd, 0xbc, 0x79, 0xe3, 0x79, 0xf3, 0x66, 0x0d, 0x1e, 0x53, 0xd3, 0x70, 0x0c, 0x5f, 0x99,
	0xfb, 0x24, 0x20, 0x26, 0x71, 0x14, 0xb4, 0x98, 0x13, 0x3f, 0x40, 0x96, 0xf2, 0xf5, 0x60, 0x8a,
	0x02, 0xe3, 0x40, 0x09, 0xa2, 0x39, 0xa2, 0x32, 0xab, 0xc3, 0x56, 0xc6, 0x96, 0x0b, 0xb6, 0x5c,
	0xb0, 0xe5, 0x9c, 0xbd, 0xd7, 0xb4, 0x89, 0x4d, 0x58, 0x59, 0x49, 0xa3, 0x8c, 0xb9, 0xff, 0x83,
	0x07, 0xb5, 0x21, 0xf6, 0x88, 0x7f, 0x64, 0x59, 0x3e, 0xa2, 0x14, 0xce, 0x00, 0x30, 0x4f, 0x0c,
	0xec, 0xe9, 0x9e, 0xe1, 0x22, 0x81, 0x6f, 0xf1, 0xed, 0x4a, 0x67, 0x90, 0xc4, 0x52, 0xa5, 0x9b,
	0xa2, 0x23, 0xc3, 0x45, 0x17, 0xb1, 0xf4, 0xd2, 0xc6, 0xc1, 0x49, 0x38, 0x95, 0x4d, 0xe2, 0x2a,
	0xd9, 0x60, 0xe2, 0xdb, 0x79, 0xf4, 0xc4, 0x24, 0x3e, 0x52, 0x16, 0x8a, 0x87, 0x16, 0x21, 0x5d,
	0x89, 0x96, 0x57, 0xed, 0x5a, 0xc5, 0x2c, 0x42, 0x28, 0x80, 0x3b, 0x46, 0x36, 0x57, 0xd8, 0x4a,
	0x27, 0x69, 0x45, 0xba, 0xff, 0x73, 0x07, 0xd4, 0x26, 0xf9, 0x2e, 0xaa, 0xf7, 0x99, 0xc0, 0x4f,
	0xa0, 0x3c, 0x43, 0x91, 0x8e, 0xad, 0x5c, 0xd3, 0xeb, 0x24, 0x96, 0x4a, 0x6f, 0x50, 0xa4, 0xf6,
	0x2e, 0x62, 0xe9, 0xc5, 0x2d, 0xf4, 0xb8, 0xa1, 0x13, 0x60, 0x8a, 0xed, 0x4b, 0x49, 0xac, 0x5b,
	0x2b, 0xcd, 0x50, 0xa4, 0x5a, 0xf0, 0x08, 0xdc, 0x35, 0x43, 0x1a, 0x10, 0x0b, 0x1b, 0x1e, 0xd5,
	0xe7, 0xe1, 0x74, 0x86, 0x22, 0x26, 0xaa, 0xd6, 0x69, 0x26, 0xb1, 0xd4, 0xe8, 0xae, 0x8a, 0x13,
	0x56, 0xd3, 0x1a, 0xe6, 0x06, 0x02, 0x5d, 0xb0, 0xeb, 0xe0, 0xd3, 0x10, 0x5b, 0x38, 0x88, 0x74,
	0x97, 0x58, 0xc8, 0x11, 0xb6, 0x5b, 0x7c, 0xbb, 0x7e, 0xf8, 0x54, 0xbe, 0xe9, 0x3a, 0xf2, 0xa0,
	0x68, 0x1c, 0xa6, 0x7d, 0x1d, 0x98, 0xc4, 0x52, 0x7d, 0x1d, 0xd3, 0xea, 0xce, 0x5a, 0x0e, 0xef,
	0x83, 0x32, 0x8d, 0xdc, 0x29, 0x71, 0x84, 0x1d, 0xe6, 0x5d, 0x9e, 0xc1, 0x53, 0x50, 0x23, 0x3e,
	0xb6, 0xb1, 0xa7, 0x33, 0xa3, 0x85, 0x12, 0xf3, 0x6b, 0x94, 0xc4, 0x52, 0x75, 0xcc, 0x70, 0x76,
	0x8a, 0xff, 0xbd, 0x62, 0x95, 0x5c, 0x7e, 0x0b, 0xce, 0xc0, 0xae, 0x9b, 0x3e, 0x22, 0x3d, 0x3f,
	0x1f, 0xa2, 0x42, 0xb9, 0xb5, 0xdd, 0xae, 0x1e, 0xca, 0x37, 0x6f, 0x7e, 0xf5, 0xf5, 0x65, 0x7b,
	0x5f, 0x45, 0x10, 0xd5, 0xea, 0xee, 0x5a, 0xfe, 0xe8, 0x0b, 0xd8, 0x70, 0x06, 0x4a, 0xe0, 0xe1,
	0x40, 0x7d, 0x7b, 0xac, 0xf6, 0xd4, 0xf7, 0x1f, 0xf4, 0xe1, 0xb8, 0xd7, 0x1f, 0xe8, 0xc7, 0xa3,
	0x77, 0x93, 0x7e, 0x57, 0x7d, 0xa5, 0xf6, 0x7b, 0x0d, 0x0e, 0x0a, 0xa0, 0xb9, 0x49, 0x98, 0x8c,
	0xc7, 0x83, 0x06, 0x0f, 0x1f, 0x80, 0x7b, 0xd7, 0x5a, 0x27, 0xdd, 0xc6, 0xd6, 0xde, 0xce, 0xb7,
	0x5f, 0x22, 0xd7, 0xd1, 0xce, 0xfe, 0x8a, 0xdc, 0x59, 0x22, 0xf2, 0xe7, 0x89, 0xc8, 0xff, 0x49,
	0x44, 0xfe, 0xfb, 0x52, 0xe4, 0xce, 0x97, 0x22, 0xf7, 0x7b, 0x29, 0x72, 0x1f, 0x9f, 0xdf, 0xc2,
	0xc0, 0x6b, 0xbf, 0xef, 0xb4, 0xcc, 0xa0, 0x67, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xfe,
	0x7e, 0xed, 0xe1, 0x03, 0x00, 0x00,
}

func (m *MinorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinorAddresses) > 0 {
		for iNdEx := len(m.MinorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinorAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if m.LiquidityModel != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LiquidityModel))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CustodiansPubkey) > 0 {
		i -= len(m.CustodiansPubkey)
		copy(dAtA[i:], m.CustodiansPubkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustodiansPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MinorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProtocolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CustodiansPubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LiquidityModel != 0 {
		n += 1 + sovTypes(uint64(m.LiquidityModel))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.MinorAddresses) > 0 {
		for _, e := range m.MinorAddresses {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MinorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_scalarorg_scalar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodiansPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodiansPubkey = append(m.CustodiansPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.CustodiansPubkey == nil {
				m.CustodiansPubkey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityModel", wireType)
			}
			m.LiquidityModel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityModel |= LiquidityModel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = github_com_scalarorg_scalar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinorAddresses = append(m.MinorAddresses, &MinorAddress{})
			if err := m.MinorAddresses[len(m.MinorAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
