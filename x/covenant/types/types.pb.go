// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalar/covenant/v1beta1/types.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/regen-network/cosmos-proto"
	_ "github.com/scalarorg/scalar-core/utils"
	exported "github.com/scalarorg/scalar-core/x/covenant/exported"
	github_com_scalarorg_scalar_core_x_multisig_exported "github.com/scalarorg/scalar-core/x/multisig/exported"
	types "github.com/scalarorg/scalar-core/x/multisig/types"
	_ "github.com/scalarorg/scalar-core/x/snapshot/exported"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Unspecified Status = 0
	Activated   Status = 1
	Deactivated Status = 2
	Pending     Status = 3
)

var Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ACTIVATED",
	2: "STATUS_DEACTIVATED",
	3: "STATUS_PENDING",
}

var Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_ACTIVATED":   1,
	"STATUS_DEACTIVATED": 2,
	"STATUS_PENDING":     3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{0}
}

// Custodian represents an individual custodian configuration
type Custodian struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ValAddress    string `protobuf:"bytes,2,opt,name=val_address,json=valAddress,proto3" json:"val_address,omitempty"`
	BitcoinPubkey []byte `protobuf:"bytes,3,opt,name=bitcoin_pubkey,json=bitcoinPubkey,proto3" json:"bitcoin_pubkey,omitempty"`
	// "0215da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488"
	Status      Status `protobuf:"varint,4,opt,name=status,proto3,enum=scalar.covenant.v1beta1.Status" json:"status,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Custodian) Reset()         { *m = Custodian{} }
func (m *Custodian) String() string { return proto.CompactTextString(m) }
func (*Custodian) ProtoMessage()    {}
func (*Custodian) Descriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{0}
}
func (m *Custodian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Custodian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Custodian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Custodian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Custodian.Merge(m, src)
}
func (m *Custodian) XXX_Size() int {
	return m.Size()
}
func (m *Custodian) XXX_DiscardUnknown() {
	xxx_messageInfo_Custodian.DiscardUnknown(m)
}

var xxx_messageInfo_Custodian proto.InternalMessageInfo

func (m *Custodian) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Custodian) GetValAddress() string {
	if m != nil {
		return m.ValAddress
	}
	return ""
}

func (m *Custodian) GetBitcoinPubkey() []byte {
	if m != nil {
		return m.BitcoinPubkey
	}
	return nil
}

func (m *Custodian) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Unspecified
}

func (m *Custodian) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// CustodianGroup represents a group of custodians with their configuration
// uid is used as identity of the group, btc_pubkey is change by list of
// custodians
type CustodianGroup struct {
	// the UID is unique, to distinguish between custodian groups
	UID           string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BitcoinPubkey []byte `protobuf:"bytes,3,opt,name=bitcoin_pubkey,json=bitcoinPubkey,proto3" json:"bitcoin_pubkey,omitempty"`
	// "tb1p07q440mdl4uyywns325dk8pvjphwety3psp4zvkngtjf3z3hhr2sfar3hv"
	Quorum      uint32       `protobuf:"varint,4,opt,name=quorum,proto3" json:"quorum,omitempty"`
	Status      Status       `protobuf:"varint,5,opt,name=status,proto3,enum=scalar.covenant.v1beta1.Status" json:"status,omitempty"`
	Description string       `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Custodians  []*Custodian `protobuf:"bytes,7,rep,name=custodians,proto3" json:"custodians,omitempty"`
}

func (m *CustodianGroup) Reset()         { *m = CustodianGroup{} }
func (m *CustodianGroup) String() string { return proto.CompactTextString(m) }
func (*CustodianGroup) ProtoMessage()    {}
func (*CustodianGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{1}
}
func (m *CustodianGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustodianGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustodianGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustodianGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustodianGroup.Merge(m, src)
}
func (m *CustodianGroup) XXX_Size() int {
	return m.Size()
}
func (m *CustodianGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CustodianGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CustodianGroup proto.InternalMessageInfo

func (m *CustodianGroup) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *CustodianGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustodianGroup) GetBitcoinPubkey() []byte {
	if m != nil {
		return m.BitcoinPubkey
	}
	return nil
}

func (m *CustodianGroup) GetQuorum() uint32 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *CustodianGroup) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Unspecified
}

func (m *CustodianGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CustodianGroup) GetCustodians() []*Custodian {
	if m != nil {
		return m.Custodians
	}
	return nil
}

type PsbtMultiSig struct {
	KeyID                    github_com_scalarorg_scalar_core_x_multisig_exported.KeyID `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3,casttype=github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	Psbt                     Psbt                                                       `protobuf:"bytes,2,opt,name=psbt,proto3,casttype=Psbt" json:"psbt,omitempty"`
	ParticipantTapScriptSigs map[string]*exported.TapScriptSigsMap                      `protobuf:"bytes,3,rep,name=participant_tap_script_sigs,json=participantTapScriptSigs,proto3" json:"participant_tap_script_sigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FinalizedTx              []byte                                                     `protobuf:"bytes,4,opt,name=finalized_tx,json=finalizedTx,proto3" json:"finalized_tx,omitempty"`
}

func (m *PsbtMultiSig) Reset()         { *m = PsbtMultiSig{} }
func (m *PsbtMultiSig) String() string { return proto.CompactTextString(m) }
func (*PsbtMultiSig) ProtoMessage()    {}
func (*PsbtMultiSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{2}
}
func (m *PsbtMultiSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PsbtMultiSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PsbtMultiSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PsbtMultiSig.Merge(m, src)
}
func (m *PsbtMultiSig) XXX_Size() int {
	return m.Size()
}
func (m *PsbtMultiSig) XXX_DiscardUnknown() {
	xxx_messageInfo_PsbtMultiSig.DiscardUnknown(m)
}

var xxx_messageInfo_PsbtMultiSig proto.InternalMessageInfo

func (m *PsbtMultiSig) GetKeyID() github_com_scalarorg_scalar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *PsbtMultiSig) GetPsbt() Psbt {
	if m != nil {
		return m.Psbt
	}
	return nil
}

func (m *PsbtMultiSig) GetParticipantTapScriptSigs() map[string]*exported.TapScriptSigsMap {
	if m != nil {
		return m.ParticipantTapScriptSigs
	}
	return nil
}

func (m *PsbtMultiSig) GetFinalizedTx() []byte {
	if m != nil {
		return m.FinalizedTx
	}
	return nil
}

type SigningSession struct {
	ID             uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PsbtMultiSig   PsbtMultiSig       `protobuf:"bytes,2,opt,name=psbt_multi_sig,json=psbtMultiSig,proto3" json:"psbt_multi_sig"`
	State          exported.PsbtState `protobuf:"varint,3,opt,name=state,proto3,enum=scalar.covenant.exported.v1beta1.PsbtState" json:"state,omitempty"`
	Key            types.Key          `protobuf:"bytes,4,opt,name=key,proto3" json:"key"`
	ExpiresAt      int64              `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CompletedAt    int64              `protobuf:"varint,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	GracePeriod    int64              `protobuf:"varint,7,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	Module         string             `protobuf:"bytes,8,opt,name=module,proto3" json:"module,omitempty"`
	ModuleMetadata *types1.Any        `protobuf:"bytes,9,opt,name=module_metadata,json=moduleMetadata,proto3" json:"module_metadata,omitempty"`
}

func (m *SigningSession) Reset()         { *m = SigningSession{} }
func (m *SigningSession) String() string { return proto.CompactTextString(m) }
func (*SigningSession) ProtoMessage()    {}
func (*SigningSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_404fd62bcdc2fd38, []int{3}
}
func (m *SigningSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SigningSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningSession.Merge(m, src)
}
func (m *SigningSession) XXX_Size() int {
	return m.Size()
}
func (m *SigningSession) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningSession.DiscardUnknown(m)
}

var xxx_messageInfo_SigningSession proto.InternalMessageInfo

func (m *SigningSession) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SigningSession) GetPsbtMultiSig() PsbtMultiSig {
	if m != nil {
		return m.PsbtMultiSig
	}
	return PsbtMultiSig{}
}

func (m *SigningSession) GetState() exported.PsbtState {
	if m != nil {
		return m.State
	}
	return exported.NonExistent
}

func (m *SigningSession) GetKey() types.Key {
	if m != nil {
		return m.Key
	}
	return types.Key{}
}

func (m *SigningSession) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *SigningSession) GetCompletedAt() int64 {
	if m != nil {
		return m.CompletedAt
	}
	return 0
}

func (m *SigningSession) GetGracePeriod() int64 {
	if m != nil {
		return m.GracePeriod
	}
	return 0
}

func (m *SigningSession) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *SigningSession) GetModuleMetadata() *types1.Any {
	if m != nil {
		return m.ModuleMetadata
	}
	return nil
}

func init() {
	proto.RegisterEnum("scalar.covenant.v1beta1.Status", Status_name, Status_value)
	proto.RegisterType((*Custodian)(nil), "scalar.covenant.v1beta1.Custodian")
	proto.RegisterType((*CustodianGroup)(nil), "scalar.covenant.v1beta1.CustodianGroup")
	proto.RegisterType((*PsbtMultiSig)(nil), "scalar.covenant.v1beta1.PsbtMultiSig")
	proto.RegisterMapType((map[string]*exported.TapScriptSigsMap)(nil), "scalar.covenant.v1beta1.PsbtMultiSig.ParticipantTapScriptSigsEntry")
	proto.RegisterType((*SigningSession)(nil), "scalar.covenant.v1beta1.SigningSession")
}

func init() {
	proto.RegisterFile("scalar/covenant/v1beta1/types.proto", fileDescriptor_404fd62bcdc2fd38)
}

var fileDescriptor_404fd62bcdc2fd38 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x1c, 0x8d, 0xe3, 0x24, 0xdd, 0x4e, 0xd2, 0x6c, 0x35, 0x5a, 0x2d, 0x6e, 0xd8, 0x8d, 0x43, 0x97,
	0x85, 0x6a, 0x61, 0x6d, 0xb5, 0x20, 0x81, 0x7a, 0x4b, 0x9a, 0x50, 0xa2, 0xaa, 0x55, 0x70, 0x52,
	0x0e, 0x1c, 0xb0, 0x26, 0xf6, 0xd4, 0x19, 0xd5, 0xf1, 0x18, 0xcf, 0x38, 0x4a, 0xb8, 0x20, 0x71,
	0x42, 0x3d, 0x71, 0xe4, 0xd2, 0x03, 0x42, 0xe2, 0x13, 0x70, 0xe3, 0xc6, 0x69, 0xc5, 0x69, 0x8f,
	0x9c, 0x22, 0x94, 0x7e, 0x8b, 0x3d, 0x21, 0xcf, 0x38, 0x6e, 0x60, 0xb7, 0x6c, 0xa5, 0xbd, 0xcd,
	0x3c, 0xbf, 0x79, 0xfe, 0xbd, 0xdf, 0x9f, 0x19, 0xf0, 0x88, 0x39, 0xc8, 0x47, 0x91, 0xe9, 0xd0,
	0x09, 0x0e, 0x50, 0xc0, 0xcd, 0xc9, 0xee, 0x10, 0x73, 0xb4, 0x6b, 0xf2, 0x59, 0x88, 0x99, 0x11,
	0x46, 0x94, 0x53, 0xf8, 0x96, 0x24, 0x19, 0x4b, 0x92, 0x91, 0x92, 0x6a, 0x5b, 0x0e, 0x65, 0x63,
	0xca, 0x6c, 0x41, 0x33, 0xe5, 0x46, 0x9e, 0xa9, 0xdd, 0xf3, 0xa8, 0x47, 0x25, 0x9e, 0xac, 0x52,
	0x74, 0xcb, 0xa3, 0xd4, 0xf3, 0xb1, 0x29, 0x76, 0xc3, 0xf8, 0xcc, 0x44, 0xc1, 0x2c, 0xfd, 0xf4,
	0xe1, 0x7f, 0x23, 0xc1, 0xd3, 0x90, 0x46, 0x1c, 0xbb, 0xaf, 0x0a, 0xa9, 0xb6, 0x8c, 0x7b, 0x1c,
	0xfb, 0x9c, 0x30, 0xe2, 0xbd, 0x92, 0xb4, 0x94, 0x64, 0x01, 0x0a, 0xd9, 0x88, 0xbe, 0x46, 0xf2,
	0xdd, 0x94, 0x1d, 0x73, 0xe2, 0xb3, 0x6b, 0xc6, 0x28, 0xc2, 0x6c, 0x44, 0x7d, 0x57, 0xb2, 0xb6,
	0xff, 0x50, 0xc0, 0xfa, 0x41, 0xcc, 0x38, 0x75, 0x09, 0x0a, 0x20, 0x04, 0x85, 0x00, 0x8d, 0xb1,
	0xa6, 0x34, 0x94, 0x9d, 0x75, 0x4b, 0xac, 0xa1, 0x0e, 0xca, 0x13, 0xe4, 0xdb, 0xc8, 0x75, 0x23,
	0xcc, 0x98, 0x96, 0x17, 0x9f, 0xc0, 0x04, 0xf9, 0x4d, 0x89, 0xc0, 0xc7, 0xa0, 0x3a, 0x24, 0xdc,
	0xa1, 0x24, 0xb0, 0xc3, 0x78, 0x78, 0x8e, 0x67, 0x9a, 0xda, 0x50, 0x76, 0x2a, 0xd6, 0x46, 0x8a,
	0xf6, 0x04, 0x08, 0x3f, 0x01, 0x25, 0xc6, 0x11, 0x8f, 0x99, 0x56, 0x68, 0x28, 0x3b, 0xd5, 0x3d,
	0xdd, 0xb8, 0xa1, 0x0c, 0x46, 0x5f, 0xd0, 0xac, 0x94, 0x0e, 0x1b, 0xa0, 0xec, 0x62, 0xe6, 0x44,
	0x24, 0xe4, 0x84, 0x06, 0x5a, 0x51, 0x04, 0xb0, 0x0a, 0x6d, 0x5f, 0xe6, 0x41, 0x35, 0x33, 0x71,
	0x18, 0xd1, 0x38, 0x84, 0x5b, 0x40, 0x8d, 0x89, 0x2b, 0x8d, 0xb4, 0xd6, 0x16, 0x73, 0x5d, 0x3d,
	0xed, 0xb6, 0xad, 0x04, 0xcb, 0x4c, 0xe6, 0x57, 0x4c, 0xde, 0xd2, 0xc3, 0x7d, 0x50, 0xfa, 0x26,
	0xa6, 0x51, 0x3c, 0x16, 0x1e, 0x36, 0xac, 0x74, 0xb7, 0xe2, 0xad, 0xf8, 0x46, 0xde, 0x4a, 0x2f,
	0x79, 0x83, 0x2d, 0x00, 0x9c, 0xa5, 0x35, 0xa6, 0xad, 0x35, 0xd4, 0x9d, 0xf2, 0xde, 0xf6, 0x8d,
	0xf2, 0x59, 0x16, 0xac, 0x95, 0x53, 0xdb, 0xbf, 0xab, 0xa0, 0xd2, 0x63, 0x43, 0x7e, 0x9c, 0x74,
	0x57, 0x9f, 0x78, 0xf0, 0x6b, 0x50, 0x3a, 0xc7, 0x33, 0x3b, 0x4b, 0xd0, 0xe1, 0x62, 0xae, 0x17,
	0x8f, 0xf0, 0xac, 0xdb, 0x7e, 0x31, 0xd7, 0xf7, 0x3d, 0xc2, 0x47, 0xf1, 0xd0, 0x70, 0xe8, 0xd8,
	0x94, 0xff, 0xa1, 0x91, 0x97, 0xae, 0x9e, 0x3a, 0x34, 0xc2, 0xe6, 0xf4, 0xba, 0x4f, 0x97, 0x2d,
	0x68, 0x88, 0xd3, 0x56, 0xf1, 0x1c, 0xcf, 0xba, 0x2e, 0x7c, 0x00, 0x0a, 0x21, 0x1b, 0x72, 0x91,
	0xe2, 0x4a, 0xeb, 0xce, 0x8b, 0xb9, 0x5e, 0x48, 0xfe, 0x6f, 0x09, 0x14, 0x7e, 0xaf, 0x80, 0xb7,
	0x43, 0x14, 0x71, 0xe2, 0x90, 0x10, 0x05, 0xdc, 0xe6, 0x28, 0xb4, 0xa5, 0x61, 0x9b, 0x11, 0x8f,
	0x69, 0xaa, 0x30, 0x79, 0x70, 0xa3, 0xc9, 0x55, 0x2b, 0x46, 0xef, 0x5a, 0x68, 0x80, 0xc2, 0xbe,
	0x90, 0xe9, 0x13, 0x8f, 0x75, 0x02, 0x1e, 0xcd, 0x2c, 0x2d, 0xbc, 0xe1, 0x33, 0x7c, 0x07, 0x54,
	0xce, 0x48, 0x80, 0x7c, 0xf2, 0x2d, 0x76, 0x6d, 0x3e, 0x15, 0x05, 0xad, 0x58, 0xe5, 0x0c, 0x1b,
	0x4c, 0x6b, 0xdf, 0x81, 0x87, 0xff, 0xab, 0x0e, 0x37, 0x81, 0x9a, 0xb4, 0x8a, 0x9c, 0x96, 0x64,
	0x09, 0x3f, 0x07, 0xc5, 0x09, 0xf2, 0x63, 0xd9, 0x5c, 0xe5, 0xbd, 0xbd, 0x97, 0x3c, 0x64, 0xf9,
	0x5a, 0x9a, 0xf9, 0x97, 0xec, 0x31, 0x0a, 0x2d, 0x29, 0xb0, 0x9f, 0xff, 0x54, 0xd9, 0x2f, 0xfc,
	0xf4, 0xb3, 0xae, 0x6c, 0x2f, 0x54, 0x50, 0xed, 0x13, 0x2f, 0x20, 0x81, 0xd7, 0xc7, 0x8c, 0x25,
	0x4d, 0x71, 0x1f, 0xe4, 0xd3, 0xda, 0x15, 0x5a, 0xa5, 0xc5, 0x5c, 0xcf, 0x77, 0xdb, 0x56, 0x9e,
	0xb8, 0xf0, 0x0b, 0x50, 0x4d, 0x32, 0x6c, 0x8b, 0xf2, 0x24, 0xc9, 0x4c, 0xe3, 0x78, 0x7c, 0xab,
	0x5c, 0xb6, 0x0a, 0xcf, 0xe6, 0x7a, 0xce, 0xaa, 0x84, 0xab, 0xad, 0xd2, 0x04, 0xc5, 0xa4, 0x57,
	0xb1, 0x18, 0x88, 0xea, 0xde, 0x07, 0xaf, 0x77, 0x94, 0x48, 0x26, 0x6d, 0x8e, 0x2d, 0x79, 0x12,
	0x7e, 0x2c, 0xd3, 0x54, 0x10, 0xa1, 0x3c, 0x58, 0x0a, 0x2c, 0x5b, 0x28, 0x3b, 0x77, 0x84, 0x67,
	0x69, 0x04, 0x22, 0x95, 0x0f, 0x01, 0xc0, 0xd3, 0x90, 0x44, 0x98, 0xd9, 0x88, 0x8b, 0xb9, 0x52,
	0xad, 0xf5, 0x14, 0x69, 0xf2, 0xa4, 0x7e, 0x0e, 0x1d, 0x87, 0x3e, 0xe6, 0xd8, 0x4d, 0x08, 0x25,
	0x41, 0x28, 0x67, 0x98, 0xa4, 0x78, 0x11, 0x72, 0xb0, 0x1d, 0xe2, 0x88, 0x50, 0x57, 0x5b, 0x93,
	0x14, 0x81, 0xf5, 0x04, 0x94, 0x0c, 0xf4, 0x98, 0xba, 0xb1, 0x8f, 0xb5, 0x3b, 0xa2, 0x88, 0xe9,
	0x0e, 0x12, 0x70, 0x57, 0xae, 0xec, 0x31, 0xe6, 0xc8, 0x45, 0x1c, 0x69, 0xeb, 0x22, 0xfc, 0x7b,
	0x86, 0xbc, 0xf2, 0x8d, 0xe5, 0x95, 0x6f, 0x34, 0x83, 0x59, 0xeb, 0xc9, 0x9f, 0xbf, 0x3d, 0x7d,
	0x6f, 0x65, 0x6c, 0xe4, 0xd3, 0x61, 0x3a, 0xd4, 0xc5, 0x8e, 0xd9, 0x4b, 0x98, 0xc7, 0x28, 0x62,
	0x23, 0xe4, 0xe3, 0xc8, 0xaa, 0x4a, 0xe1, 0xe3, 0x54, 0x57, 0x16, 0xf9, 0xc9, 0xaf, 0x0a, 0x28,
	0xc9, 0xbb, 0x01, 0xbe, 0x0f, 0x60, 0x7f, 0xd0, 0x1c, 0x9c, 0xf6, 0xed, 0xd3, 0x93, 0x7e, 0xaf,
	0x73, 0xd0, 0xfd, 0xac, 0xdb, 0x69, 0x6f, 0xe6, 0x6a, 0x77, 0x2f, 0x2e, 0x1b, 0xe5, 0xd3, 0x80,
	0x85, 0xd8, 0x21, 0x67, 0x04, 0xbb, 0xf0, 0x11, 0xd8, 0x4c, 0x89, 0xcd, 0x83, 0x41, 0xf7, 0xcb,
	0xe6, 0xa0, 0xd3, 0xde, 0x54, 0x6a, 0x1b, 0x17, 0x97, 0x8d, 0xf5, 0xa6, 0xc3, 0xc9, 0x04, 0x71,
	0xec, 0xae, 0xa8, 0xb5, 0x3b, 0xd7, 0xb4, 0xbc, 0x54, 0x6b, 0x63, 0x94, 0x11, 0x75, 0x50, 0x4d,
	0x89, 0xbd, 0xce, 0x49, 0xbb, 0x7b, 0x72, 0xb8, 0xa9, 0xd6, 0xca, 0x17, 0x97, 0x8d, 0xb5, 0x1e,
	0x0e, 0x5c, 0x12, 0x78, 0xb5, 0xc2, 0x0f, 0xbf, 0xd4, 0x73, 0xad, 0xa3, 0x67, 0x8b, 0xba, 0xf2,
	0x7c, 0x51, 0x57, 0xfe, 0x5e, 0xd4, 0x95, 0x1f, 0xaf, 0xea, 0xb9, 0xe7, 0x57, 0xf5, 0xdc, 0x5f,
	0x57, 0xf5, 0xdc, 0x57, 0xbb, 0xb7, 0xb8, 0x37, 0xb2, 0xd7, 0x50, 0xbc, 0x54, 0xc3, 0x92, 0xc8,
	0xe2, 0x47, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xc3, 0x8e, 0x36, 0xb7, 0x07, 0x00, 0x00,
}

func (m *Custodian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Custodian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Custodian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BitcoinPubkey) > 0 {
		i -= len(m.BitcoinPubkey)
		copy(dAtA[i:], m.BitcoinPubkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BitcoinPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustodianGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustodianGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustodianGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Custodians) > 0 {
		for iNdEx := len(m.Custodians) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Custodians[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Quorum != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Quorum))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BitcoinPubkey) > 0 {
		i -= len(m.BitcoinPubkey)
		copy(dAtA[i:], m.BitcoinPubkey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BitcoinPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PsbtMultiSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PsbtMultiSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PsbtMultiSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalizedTx) > 0 {
		i -= len(m.FinalizedTx)
		copy(dAtA[i:], m.FinalizedTx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FinalizedTx)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParticipantTapScriptSigs) > 0 {
		keysForParticipantTapScriptSigs := make([]string, 0, len(m.ParticipantTapScriptSigs))
		for k := range m.ParticipantTapScriptSigs {
			keysForParticipantTapScriptSigs = append(keysForParticipantTapScriptSigs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForParticipantTapScriptSigs)
		for iNdEx := len(keysForParticipantTapScriptSigs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ParticipantTapScriptSigs[string(keysForParticipantTapScriptSigs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForParticipantTapScriptSigs[iNdEx])
			copy(dAtA[i:], keysForParticipantTapScriptSigs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForParticipantTapScriptSigs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Psbt) > 0 {
		i -= len(m.Psbt)
		copy(dAtA[i:], m.Psbt)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Psbt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModuleMetadata != nil {
		{
			size, err := m.ModuleMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x42
	}
	if m.GracePeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GracePeriod))
		i--
		dAtA[i] = 0x38
	}
	if m.CompletedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CompletedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.PsbtMultiSig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Custodian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BitcoinPubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CustodianGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BitcoinPubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Quorum != 0 {
		n += 1 + sovTypes(uint64(m.Quorum))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Custodians) > 0 {
		for _, e := range m.Custodians {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PsbtMultiSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Psbt)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ParticipantTapScriptSigs) > 0 {
		for k, v := range m.ParticipantTapScriptSigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.FinalizedTx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SigningSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTypes(uint64(m.ID))
	}
	l = m.PsbtMultiSig.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = m.Key.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ExpiresAt != 0 {
		n += 1 + sovTypes(uint64(m.ExpiresAt))
	}
	if m.CompletedAt != 0 {
		n += 1 + sovTypes(uint64(m.CompletedAt))
	}
	if m.GracePeriod != 0 {
		n += 1 + sovTypes(uint64(m.GracePeriod))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ModuleMetadata != nil {
		l = m.ModuleMetadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Custodian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Custodian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Custodian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BitcoinPubkey = append(m.BitcoinPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.BitcoinPubkey == nil {
				m.BitcoinPubkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustodianGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustodianGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustodianGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinPubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BitcoinPubkey = append(m.BitcoinPubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.BitcoinPubkey == nil {
				m.BitcoinPubkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			m.Quorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quorum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custodians", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custodians = append(m.Custodians, &Custodian{})
			if err := m.Custodians[len(m.Custodians)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PsbtMultiSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PsbtMultiSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PsbtMultiSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_scalarorg_scalar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psbt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psbt = append(m.Psbt[:0], dAtA[iNdEx:postIndex]...)
			if m.Psbt == nil {
				m.Psbt = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantTapScriptSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParticipantTapScriptSigs == nil {
				m.ParticipantTapScriptSigs = make(map[string]*exported.TapScriptSigsMap)
			}
			var mapkey string
			var mapvalue *exported.TapScriptSigsMap
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &exported.TapScriptSigsMap{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ParticipantTapScriptSigs[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedTx = append(m.FinalizedTx[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedTx == nil {
				m.FinalizedTx = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PsbtMultiSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PsbtMultiSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= exported.PsbtState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			m.CompletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriod", wireType)
			}
			m.GracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleMetadata == nil {
				m.ModuleMetadata = &types1.Any{}
			}
			if err := m.ModuleMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
